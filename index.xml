<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Ame</title>
        <link>https://example.com/</link>
        <description>一个艺术世界</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vlicecream520@gmail.com (Ame)</managingEditor>
            <webMaster>vlicecream520@gmail.com (Ame)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 24 Dec 2024 18:18:00 &#43;0800</lastBuildDate>
            <atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>四元数</title>
    <link>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%9B%9B%E5%85%83%E6%95%B0/</link>
    <pubDate>Tue, 24 Dec 2024 18:18:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%9B%9B%E5%85%83%E6%95%B0/</guid>
    <description><![CDATA[四元数]]></description>
</item>
<item>
    <title>复数</title>
    <link>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%A4%8D%E6%95%B0/</link>
    <pubDate>Tue, 24 Dec 2024 18:17:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%A4%8D%E6%95%B0/</guid>
    <description><![CDATA[<h1 id="复数"><em><strong>复数</strong></em></h1>
<h2 id="定义"><em><strong>定义</strong></em></h2>
<p><em>任意一个复数`  𝑧 ∈ C 都可以表示为  z = a + bi 的形式，其中 𝑎, 𝑏 ∈ R 而且 i <sup>2</sup> = -1</em></p>]]></description>
</item>
<item>
    <title>矩阵</title>
    <link>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9F%A9%E9%98%B5/</link>
    <pubDate>Tue, 24 Dec 2024 11:05:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9F%A9%E9%98%B5/</guid>
    <description><![CDATA[<h1 id="矩阵"><em><strong>矩阵</strong></em></h1>
<h2 id="矩阵-1"><em><strong>矩阵</strong></em></h2>
<p><em>简单来说矩阵就是一个矩形的数字、符号或表达式数组。矩阵中每一项叫做矩阵的元素(Element)。下面是一个2×3矩阵的例子</em></p>]]></description>
</item>
<item>
    <title>向量</title>
    <link>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%90%91%E9%87%8F/</link>
    <pubDate>Mon, 23 Dec 2024 22:00:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/3d%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E5%90%91%E9%87%8F/</guid>
    <description><![CDATA[<h1 id="向量"><em><strong>向量</strong></em></h1>
<h2 id="标量与向量"><em><strong>标量与向量</strong></em></h2>
<h3 id="标量"><em><strong>标量</strong></em></h3>
<p><em>标量有大小 可以是正负，但是他没有方向</em></p>
<h3 id="向量-1"><em><strong>向量</strong></em></h3>
<h4 id="介绍"><em><strong>介绍</strong></em></h4>
<p><em>向量最基本的定义就是一个方向。或者更正式的说，向量有一个方向(Direction)和大小(Magnitude，也叫做强度或长度)</em></p>]]></description>
</item>
<item>
    <title>Unreal HLSL</title>
    <link>https://example.com/unreal-hlsl/</link>
    <pubDate>Sun, 22 Dec 2024 13:31:00 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/unreal-hlsl/</guid>
    <description><![CDATA[<h1 id="hlsl"><em><strong>HLSL</strong></em></h1>
<h2 id="数据类型"><em><strong>数据类型</strong></em></h2>
<p><em><strong>代码基于以下蓝图</strong></em></p>

<h3 id="bool"><em><strong>bool</strong></em></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hlsl" data-lang="hlsl"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="n">b</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="int"><em><strong>int</strong></em></h3>
<p><em>数据范围为 &ldquo;-2147483648 ~ 2147483647&rdquo;</em></p>]]></description>
</item>
<item>
    <title>备忘录</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
    <description><![CDATA[<h1 id="备忘录">备忘录</h1>
<h2 id="状态变化模式">状态变化模式</h2>
<ol>
<li><em><strong>什么是状态变化</strong></em>
<ul>
<li><em>在组件构建过程中, 某些对象的状态面临变化, 如何对这些变化进行有效的管理? 同时又保证高层的稳定?</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Memento</em></li>
<li><em>State</em></li>
</ul>
</li>
</ol>
<h2 id="动机">动机</h2>
<ol>
<li><em>在软件构建过程中, 某些对象的状态在转换过程中, 可能由于某种需要, 要求程序能够回溯到对象之前的状态</em></li>
<li><em>如果使用一些公有接口来让其他对象得到对象的状态, 便会暴露对象的细节实现</em></li>
<li><em>如何实现对象状态的良好保存与恢复? 但同时又不会因此而破坏对象本身的封装性</em></li>
</ol>
<h2 id="模式定义">模式定义</h2>
<ol>
<li><em>在不破坏封装性的的前提下, 捕获一个对象的内部状态, 并在该对象之外保存此状态，这样以后就可以将该对象恢复到原先保存的状态</em></li>
</ol>
<h2 id="要点总结">要点总结</h2>
<ol>
<li><em>备忘录(Memento)存储原发器对象的内部状态 在需要时恢复原发器状态</em></li>
<li><em>Memento模式的核心是信息隐藏, 即原发器需要向外接隐藏信息, 保持其封装性，但同时有需要将状态保持到外界 (Memento)</em></li>
<li><em>由于现代语言运行时都具有相当的对象序列化支持, 因此往往采用效率高、又较容器正确实现的序列化方案来实现Memento模式</em></li>
</ol>]]></description>
</item>
<item>
    <title>策略模式</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h1 id="策略模式">策略模式</h1>
<h2 id="组件协作模式"><em><strong>组件协作模式</strong></em></h2>
<ol>
<li><em><strong>什么是组件协作模式</strong></em>
<ul>
<li><em>现代软件专业分工之后的第一个结果就是 <strong>框架与应用程序的划分</strong></em></li>
<li><em><strong>组件协作</strong></em> <em>模式通过晚绑定，来实现框架和应用之间的松耦合，是二者之间协作时常用的模式</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Template Method</em></li>
<li><em>Observer / Event</em></li>
<li><em>Strategy</em></li>
</ul>
</li>
</ol>
<h2 id="使用策略模式的动机"><em><strong>使用策略模式的动机</strong></em></h2>
<ol>
<li><em>在软件构建的过程中，某些对象使用的算法可能多种多样的，经常改变，如果将这种算法都编码到对象中，将会使对象变得异常复杂，而且有时候支持不使用的算法也是一个性能负担</em></li>
<li><em>如何在运行时根据需要透明的更改对象的算法? 将算法与对象本身解藕 从而避免上述问题</em></li>
</ol>
<h2 id="静态代码">静态代码</h2>
<ol>
<li>
<p><em><strong>场景</strong></em></p>]]></description>
</item>
<item>
    <title>抽象工厂</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</guid>
    <description><![CDATA[<h1 id="抽象工厂">抽象工厂</h1>
<h2 id="对象创建模式">对象创建模式</h2>
<ol>
<li><em><strong>什么是对象创建</strong></em>
<ul>
<li><em>通过对象创建模式，绕开new，来避免对象创建(new)过程中所导致的紧耦合(依赖具体类)从而支持对象创建</em></li>
<li><em><strong>他是接口抽象之后的第一步工作</strong></em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Factory Method</em></li>
<li><em>Abstract Factory</em></li>
<li><em>Prototype</em></li>
<li><em>Builder</em></li>
</ul>
</li>
</ol>
<h2 id="抽象工厂动机">抽象工厂动机</h2>
<ol>
<li><em>在软件系统中 经常面临着 &ldquo;一系列相互依赖的对象&quot;的创建工作，同时, 由于需求的变化, 往往存在更多系列对象的创建工作</em></li>
<li><em>如果应对这种变化? 如何绕过常规的对象创建方法(new), 提供一种&quot;封装机制&quot;来避免客户程序和这种&quot;多系列具体对象创建工作&quot;的紧耦合?</em></li>
</ol>
<h2 id="初始代码">初始代码</h2>
<ol>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pr]]></description>
</item>
<item>
    <title>代理模式</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h1 id="代理模式">代理模式</h1>
<h2 id="接口隔离模式">接口隔离模式</h2>
<ol>
<li><em><strong>什么是接口隔离</strong></em>
<ul>
<li><em>在组件构建过程中, 某些接口之间直接的依赖 常常会带来很多问题 甚至根本无法实现</em></li>
<li><em>采用添加一层间接(稳定)接口, 来隔离本来互相紧密关联的接口是一种常见的解决方案</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Façade</em></li>
<li><em>Proxy</em></li>
<li><em>Mediator</em></li>
<li><em>Adapter</em></li>
</ul>
</li>
</ol>
<h2 id="动机">动机</h2>
<ol>
<li><em>在面向对象系统中, 有些对象由于某种原因(比如对象创建的开销很大, 或者某些操作需要安全控制, 或者需要进程外的访问等)直接访问会给使用者或者系统结构带来很多麻烦</em></li>
<li><em>如何在不是去透明操作对象的同时来管理或者控制这些对象特有的复杂性？</em></li>
<li><em>增加一层间接层是软件开发中常见的解决方式</em></li>
</ol>
<h2 id="初始代码">初始代码</h2>
<ol>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pr]]></description>
</item>
<item>
    <title>单例模式</title>
    <link>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 21 Jul 2023 16:29:59 &#43;0800</pubDate>
    <author>Ame</author>
    <guid>https://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[<h1 id="单例模式">单例模式</h1>
<h2 id="对象性能模式">对象性能模式</h2>
<ol>
<li><em><strong>什么是对象性能</strong></em>
<ul>
<li><em>面向对象很好的解决了&quot;抽象&quot;的问题, 但是必不可免的要付出一定的代价，对于通常情况来讲, 面向对象的成本大都可以忽略不计，但是某些情况, 面向对象所带来的成本必须谨慎处理</em></li>
</ul>
</li>
<li><em><strong>典型模式</strong></em>
<ul>
<li><em>Singleton</em></li>
<li><em>Flyweight</em></li>
</ul>
</li>
</ol>
<h2 id="单例模式动机">单例模式动机</h2>
<ol>
<li><em>在软件系统中 经常有这样一些特殊的类, 必须保证他们在系统中只存在一个实例, 才能确保他们的逻辑正确性以及良好的效率</em></li>
<li><em>如何绕过常规的构造器, 提供一种机制来保证一个类只有一个实例</em></li>
<li><em>ps：这个是类设计者的责任, 而不是使用者的责任</em></li>
</ol>
<h2 id="演示代码">演示代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pr]]></description>
</item>
</channel>
</rss>
